import com.github.spotbugs.SpotBugsTask

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
    id "com.github.spotbugs" version "2.0.1"
    id "io.freefair.lombok" version "4.1.5" apply false
    id 'org.springframework.boot' version '2.2.1.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "org.sonarqube" version "2.7"

}
allprojects {
    version = '1.0'
    ext {
        appName = "pool"
        gdxVersion = '1.9.10'
        roboVMVersion = '2.3.8'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
    }

    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    test {
        useJUnitPlatform()

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }

        jacoco {
            enabled = true
            includes = ['nl.tudelft.cse.sem.*']
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                enabled = true
                element = 'CLASS'
//                includes = ['nl.tudelft.cse.sem.*']

                limit {
                    counter = "BRANCH"
                    minimum = 0.75
                }

                excludes = ['*.gui.*']
            }
        }
    }

    checkstyle {
        toolVersion "8.25"
        ignoreFailures = false
        maxWarnings = 0
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    spotbugs {
        toolVersion = '4.0.0-beta4'
    }

    tasks.withType(SpotBugsTask) {
        reports.xml.enabled = false
        reports.html.enabled = true
    }

    wrapper {
        distributionType = Wrapper.DistributionType.ALL
    }

    dependencies {
        testCompile 'org.junit.jupiter:junit-jupiter:5.5.2'
        testCompile "org.mockito:mockito-core:2.25.1"
        testCompile "org.assertj:assertj-core:3.12.2"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    check.dependsOn jacocoTestCoverageVerification
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'io.freefair.lombok'

    generateLombokConfig.enabled = false

    sourceCompatibility = 13
}

project(":desktop") {
    apply plugin: "java-library"

    dependencies {
        compile project(path: ':shared', configuration: 'shadow')
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-bullet:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.konghq:unirest-java:3.2.00"
        compile "com.konghq:unirest-objectmapper-jackson:3.2.00"
    }

    ext {
        gdxVersion = '1.9.10'
    }

    jar {
        manifest {
            attributes 'Main-Class': 'nl.tudelft.cse.sem.pool.DesktopLauncher'
        }
    }
}

project(":server") {

    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE")
        }
    }

    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile project(path: ':shared', configuration: 'shadow')
        compile group: 'org.mindrot', name: 'jbcrypt', version: '0.3m'
        implementation 'com.auth0:java-jwt:3.8.3'
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-security")
        compile('org.springframework.boot:spring-boot-starter-jdbc')
        compile('org.springframework.boot:spring-boot-starter-data-jdbc')
//        runtimeOnly ('org.postgresql:postgresql')
        runtimeOnly ('com.h2database:h2')
        testRuntimeOnly ('com.h2database:h2')
        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile group: 'org.mockito', name: 'mockito-core', version: '3.2.0'
        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
        testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.2.0'
    }

    bootJar {
        archiveFileName = "server.jar"
    }

}

task jacocoMerge(type: JacocoMerge) {
    subprojects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
}

task createCoverageReport(type: JacocoReport) {
    dependsOn (subprojects.test, jacocoMerge)
    sourceSets project(':desktop').sourceSets.main
    sourceSets project(':server').sourceSets.main
    sourceSets project(':shared').sourceSets.main

    executionData "${buildDir}/jacoco/jacocoMerge.exec"

    reports {
        html.enabled = true
        html.destination file("${buildDir}/jacoco/html")
        xml.enabled = false
        csv.enabled = true
        csv.destination file("${buildDir}/jacoco/csv")
    }

    onlyIf = {
        true
    }
}
